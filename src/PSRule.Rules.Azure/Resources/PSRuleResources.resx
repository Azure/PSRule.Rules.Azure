<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentFormatInvalid" xml:space="preserve">
    <value>The arguments for '{0}' are not in the expected format or type.</value>
  </data>
  <data name="ArgumentInvalidBoolean" xml:space="preserve">
    <value>The argument '{0}' for '{1}' is not a valid boolean.</value>
  </data>
  <data name="ArgumentInvalidCIDR" xml:space="preserve">
    <value>The specified CIDR '{0}' is not valid.</value>
  </data>
  <data name="ArgumentInvalidCIDRLength" xml:space="preserve">
    <value>The specified prefix length '{0}' is out of range for the CIDR '{1}'.</value>
  </data>
  <data name="ArgumentInvalidDateTime" xml:space="preserve">
    <value>The argument '{0}' for '{1}' is not a valid time.</value>
  </data>
  <data name="ArgumentInvalidInteger" xml:space="preserve">
    <value>The argument '{0}' for '{1}' is not a valid integer.</value>
  </data>
  <data name="ArgumentInvalidResourceType" xml:space="preserve">
    <value>The resource type '{1}/{2}' for '{0}' is not known.</value>
  </data>
  <data name="ArgumentInvalidString" xml:space="preserve">
    <value>The argument '{0}' for '{1}' is not a valid string.</value>
  </data>
  <data name="ArgumentInvalidStringArray" xml:space="preserve">
    <value>The argument '{0}' for '{1}' is not a valid string array.</value>
  </data>
  <data name="ArgumentsOutOfRange" xml:space="preserve">
    <value>The number of arguments '{1}' is not within the allowed range for '{0}'.</value>
  </data>
  <data name="AssignmentFileExpandFailed" xml:space="preserve">
    <value>Unable to expand the specified assignment file '{0}'. {1}</value>
  </data>
  <data name="AssignmentFileNotFound" xml:space="preserve">
    <value>Unable to find the specified assignment file '{0}'.</value>
    <comment>Occurs when a assignment file is specified that doesn't exist.</comment>
  </data>
  <data name="BicepCommandError" xml:space="preserve">
    <value>An exception was raised attempting to call the Bicep CLI: {0}</value>
  </data>
  <data name="BicepCompileError" xml:space="preserve">
    <value>Bicep ({0}) compilation of '{1}' failed with: {2}</value>
  </data>
  <data name="BicepCompileTimeout" xml:space="preserve">
    <value>Bicep compilation hasn't completed within the timeout window. This can be caused by errors or warnings. Check the Bicep output by running bicep build and addressing any issues.</value>
  </data>
  <data name="BicepExpandInvalid" xml:space="preserve">
    <value>Unable to expand resources because the source file '{0}' was not valid. {1}</value>
  </data>
  <data name="BicepNotFound" xml:space="preserve">
    <value>Bicep CLI can not be found. Consider installing Bicep or setting the PSRULE_AZURE_BICEP_PATH environment variable to resolve this issue.</value>
  </data>
  <data name="CloudEnvironmentInvalid" xml:space="preserve">
    <value>Failed to read cloud environment content.</value>
  </data>
  <data name="EmptyConditionExpandResult" xml:space="preserve">
    <value>The expand resulted in an empty condition being returned for '{0}' from '{1}'.</value>
  </data>
  <data name="ExpressionEvaluateError" xml:space="preserve">
    <value>An error occurred evaluating expression '{0}' line {1}. {2}</value>
  </data>
  <data name="ExpressionInvalid" xml:space="preserve">
    <value>Failed to parse expression. The expression may not be valid. Expression: "{0}"</value>
    <comment>Occurs when an expression fails to be parsed.</comment>
  </data>
  <data name="FunctionInvalidString" xml:space="preserve">
    <value>The specified parameter is not a valid string.</value>
  </data>
  <data name="FunctionNotFound" xml:space="preserve">
    <value>The function "{0}" was not found.</value>
  </data>
  <data name="IndexInvalid" xml:space="preserve">
    <value>The language expression index '{0}' is not valid for the object.</value>
    <comment>Occurs when an index is not valid.</comment>
  </data>
  <data name="JsonFileFormatInvalid" xml:space="preserve">
    <value>Unable to read file '{0}' because the JSON format was not valid. {1}</value>
  </data>
  <data name="ManifestResourceNotFound" xml:space="preserve">
    <value>Unable to find '{0}' in manifest.</value>
  </data>
  <data name="MetadataNotFound" xml:space="preserve">
    <value>The parameter file '{0}' does not contain a metadata property.</value>
    <comment>Occurs when a parameter file does not have the metadata property set.</comment>
  </data>
  <data name="MismatchingResourceSegments" xml:space="preserve">
    <value>The number of resource segments needs to match the provided resource type.</value>
  </data>
  <data name="OutputTypeInvalid" xml:space="preserve">
    <value>The type for output '{0}' was not defined or invalid.</value>
  </data>
  <data name="ParameterFileNotFound" xml:space="preserve">
    <value>Unable to find the specified parameter file '{0}'.</value>
    <comment>Occurs when a parameter file is specified that doesn't exist.</comment>
  </data>
  <data name="ParameterNotFound" xml:space="preserve">
    <value>The parameter named '{0}' was not set or a defaultValue was defined.</value>
    <comment>A reference to a parameter that in not in the current context.</comment>
  </data>
  <data name="ParameterTypeInvalid" xml:space="preserve">
    <value>The type for parameter '{0}' was not defined or invalid.</value>
  </data>
  <data name="PathTraversal" xml:space="preserve">
    <value>The template file '{0}' must be within the current working directory.</value>
    <comment>Occurs when the template file is outside of the current working path.</comment>
  </data>
  <data name="PolicyIgnoreInvalid" xml:space="preserve">
    <value>Failed to the policy ignore content.</value>
  </data>
  <data name="PropertyNotFound" xml:space="preserve">
    <value>The language expression property '{0}' doesn't exist.</value>
    <comment>Occurs when a property that don't exist is referenced.</comment>
  </data>
  <data name="ProviderContentInvalid" xml:space="preserve">
    <value>Failed to read provider data content.</value>
  </data>
  <data name="ProviderIndexInvalid" xml:space="preserve">
    <value>Failed to read provider data index.</value>
  </data>
  <data name="ReadJsonFailed" xml:space="preserve">
    <value>Read JSON failed.</value>
  </data>
  <data name="SerializeNullPSObject" xml:space="preserve">
    <value>Can not serialize a null PSObject.</value>
  </data>
  <data name="ShouldCreatePath" xml:space="preserve">
    <value>Create path</value>
  </data>
  <data name="ShouldWriteFile" xml:space="preserve">
    <value>Write file</value>
  </data>
  <data name="TemplateExpandInvalid" xml:space="preserve">
    <value>Unable to expand resources because the template '{0}' was not valid with parameters '{1}'. {2}</value>
  </data>
  <data name="TemplateExpressionTooLong" xml:space="preserve">
    <value>The template expression '{0}' exceeded the maximum length of 100K characters.</value>
  </data>
  <data name="TemplateFileNotFound" xml:space="preserve">
    <value>Unable to find the specified template file '{0}'.</value>
    <comment>Occurs when a template file is specified that doesn't exist.</comment>
  </data>
  <data name="TemplateFileReferenceNotFound" xml:space="preserve">
    <value>Unable to find template referenced within parameter file '{0}'.</value>
    <comment>Occurs when a parameter file references a template that doesn't exist.</comment>
  </data>
  <data name="TemplateLinkNotFound" xml:space="preserve">
    <value>The parameter file '{0}' does not reference a linked template.</value>
    <comment>Occurs when a parameter file does not have the metadata.template property set.</comment>
  </data>
  <data name="TemplateParameterInvalid" xml:space="preserve">
    <value>The template parameter '{0}' does not use the required format.</value>
    <comment>The structure of the template parameter within the parameter file is invalid.</comment>
  </data>
  <data name="VariableNotFound" xml:space="preserve">
    <value>The variable named '{0}' was not defined in the template.</value>
    <comment>A reference to a variable that in not in the current context.</comment>
  </data>
</root>