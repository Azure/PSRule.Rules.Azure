{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "11726520509976744224"
    }
  },
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Storage Account.",
        "example": "<name>"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The Azure region to deploy to.",
        "strongType": "location",
        "example": "EastUS",
        "ignore": true
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Create the Storage Account as LRS or GRS."
      },
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ]
    },
    "suffixLength": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Determine how many additional characters are added to the storage account name as a suffix.",
        "ignore": true
      },
      "maxValue": 13,
      "minValue": 0
    },
    "containers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of storage containers to create on the storage account.",
        "example": [
          {
            "name": "logs",
            "publicAccess": "None",
            "metadata": {}
          }
        ]
      }
    },
    "lifecycleRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of lifecycle management policies for the storage account.",
        "example": {
          "enabled": true,
          "name": "<rule_name>",
          "type": "Lifecycle",
          "definition": {
            "actions": {
              "baseBlob": {
                "delete": {
                  "daysAfterModificationGreaterThan": 7
                }
              }
            },
            "filters": {
              "blobTypes": [
                "blockBlob"
              ],
              "prefixMatch": [
                "logs/"
              ]
            }
          }
        }
      }
    },
    "blobSoftDeleteDays": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "The number of days to retain deleted blobs. When set to 0, soft delete is disabled.",
        "example": 7
      },
      "maxValue": 365,
      "minValue": 0
    },
    "containerSoftDeleteDays": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "The number of days to retain deleted containers. When set to 0, soft delete is disabled.",
        "example": 7
      },
      "maxValue": 365,
      "minValue": 0
    },
    "shares": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of file shares to create on the storage account.",
        "example": [
          {
            "name": "<share_name>",
            "shareQuota": 5,
            "metadata": {}
          }
        ]
      }
    },
    "useLargeFileShares": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determines if large file shares are enabled. This can not be disabled once enabled.",
        "ignore": true
      }
    },
    "shareSoftDeleteDays": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "The number of days to retain deleted shares. When set to 0, soft delete is disabled.",
        "example": 7
      },
      "maxValue": 365,
      "minValue": 0
    },
    "allowBlobPublicAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determines if any containers can be configured with the anonymous access types of blob or container."
      }
    },
    "keyVaultPrincipalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Set to the objectId of Azure Key Vault to delegated permission for use with Key Managed Storage Accounts.",
        "ignore": true
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "description": "Tags to apply to the resource.",
        "example": {
          "service": "<service_name>",
          "env": "prod"
        }
      }
    }
  },
  "functions": [],
  "variables": {
    "normalName": "[concat(parameters('storageAccountName'), if(greater(parameters('suffixLength'), 0), substring(uniqueString(resourceGroup().id), 0, parameters('suffixLength')), ''))]",
    "blobSoftDeleteLookup": {
      "true": {
        "enabled": true,
        "days": "[parameters('blobSoftDeleteDays')]"
      },
      "false": {
        "enabled": false
      }
    },
    "containerSoftDeleteLookup": {
      "true": {
        "enabled": true,
        "days": "[parameters('containerSoftDeleteDays')]"
      },
      "false": null
    },
    "shareSoftDeleteLookup": {
      "true": {
        "enabled": true,
        "days": "[parameters('shareSoftDeleteDays')]"
      },
      "false": {
        "enabled": false
      }
    },
    "largeFileSharesState": "[if(parameters('useLargeFileShares'), 'Enabled', 'Disabled')]",
    "storageAccountKeyOperatorRoleId": "[resourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('normalName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('sku')]",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot",
        "largeFileSharesState": "[variables('largeFileSharesState')]",
        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
        "minimumTlsVersion": "TLS1_2"
      },
      "tags": "[parameters('tags')]",
      "metadata": {
        "description": "Storage account"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', variables('normalName'), 'default')]",
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": "[variables('blobSoftDeleteLookup')[string(greater(parameters('blobSoftDeleteDays'), 0))]]",
        "containerDeleteRetentionPolicy": "[variables('containerSoftDeleteLookup')[string(greater(parameters('containerSoftDeleteDays'), 0))]]"
      },
      "metadata": {
        "description": "Blob Services"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('normalName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', variables('normalName'), 'default')]",
      "properties": {
        "shareDeleteRetentionPolicy": "[variables('shareSoftDeleteLookup')[string(greater(parameters('shareSoftDeleteDays'), 0))]]"
      },
      "metadata": {
        "description": "File Services"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('normalName'))]"
      ]
    },
    {
      "condition": "[not(equals(length(parameters('containers')), 0))]",
      "copy": {
        "name": "storageAccountContainers",
        "count": "[length(range(0, if(equals(length(parameters('containers')), 0), 1, length(parameters('containers')))))]"
      },
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[if(equals(length(parameters('containers')), 0), format('{0}/default/empty', variables('normalName')), format('{0}/default/{1}', variables('normalName'), parameters('containers')[range(0, if(equals(length(parameters('containers')), 0), 1, length(parameters('containers'))))[copyIndex()]].name))]",
      "properties": {
        "metadata": "[parameters('containers')[range(0, if(equals(length(parameters('containers')), 0), 1, length(parameters('containers'))))[copyIndex()]].metadata]",
        "publicAccess": "[parameters('containers')[range(0, if(equals(length(parameters('containers')), 0), 1, length(parameters('containers'))))[copyIndex()]].publicAccess]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('normalName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('normalName'))]"
      ],
      "metadata": {
        "description": "Storage account containers"
      }
    },
    {
      "condition": "[not(empty(parameters('lifecycleRules')))]",
      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', variables('normalName'), 'default')]",
      "properties": {
        "policy": {
          "rules": "[parameters('lifecycleRules')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('normalName'))]"
      ],
      "metadata": {
        "description": "Storage account management policies"
      }
    },
    {
      "condition": "[not(equals(length(parameters('shares')), 0))]",
      "copy": {
        "name": "storageAccountShares",
        "count": "[length(range(0, if(equals(length(parameters('shares')), 0), 1, length(parameters('shares')))))]"
      },
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2019-06-01",
      "name": "[if(equals(length(parameters('shares')), 0), format('{0}/default/empty', variables('normalName')), format('{0}/default/{1}', variables('normalName'), parameters('shares')[range(0, if(equals(length(parameters('shares')), 0), 1, length(parameters('shares'))))[copyIndex()]].name))]",
      "properties": {
        "metadata": "[parameters('shares')[range(0, if(equals(length(parameters('shares')), 0), 1, length(parameters('shares'))))[copyIndex()]].metadata]",
        "shareQuota": "[parameters('shares')[range(0, if(equals(length(parameters('shares')), 0), 1, length(parameters('shares'))))[copyIndex()]].shareQuota]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('normalName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('normalName'))]"
      ],
      "metadata": {
        "description": "File Services shares"
      }
    },
    {
      "condition": "[not(empty(parameters('keyVaultPrincipalId')))]",
      "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "name": "[format('{0}/Microsoft.Authorization/{1}', variables('normalName'), guid(parameters('keyVaultPrincipalId'), variables('storageAccountKeyOperatorRoleId')))]",
      "properties": {
        "roleDefinitionId": "[variables('storageAccountKeyOperatorRoleId')]",
        "principalId": "[parameters('keyVaultPrincipalId')]",
        "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('normalName'))]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('normalName'))]"
      ],
      "metadata": {
        "description": "Storage account role assignments"
      }
    }
  ],
  "outputs": {
    "storageAccountResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('normalName'))]"
    }
  }
}